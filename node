```go
type Node struct {
	Parent, FirstChild, LastChild, PrevSibling, NextSibling *Node

	Type      NodeType
	DataAtom  atom.Atom
	Data      string
	Namespace string
	Attr      []Attribute
}
```

A Node consists of a NodeType and some Data (tag name for element nodes, content for text) and are part of a tree of Nodes. Element nodes may also have a Namespace and contain a slice of Attributes. Data is unescaped, so that it looks like "a\<b" rather than "a&lt;b". For element nodes, DataAtom is the atom for Data, or zero if Data is not a known tag name.

An empty Namespace implies a "[http://www.w3.org/1999/xhtml](http://www.w3.org/1999/xhtml)" namespace. Similarly, "math" is short for "[http://www.w3.org/1998/Math/MathML](http://www.w3.org/1998/Math/MathML)", and "svg" is short for "[http://www.w3.org/2000/svg](http://www.w3.org/2000/svg)".


```go
func (n *html.Node) AppendChild(c *html.Node)
func (n *html.Node) InsertBefore(newChild *html.Node, oldChild *html.Node)
func (n *html.Node) RemoveChild(c *html.Node)
```

[`html.Node` on pkg.go.dev](https://pkg.go.dev/golang.org/x/net@v0.30.0/html#Node)

const (
	ErrorNode NodeType = iota
	TextNode
	DocumentNode
	ElementNode
	CommentNode
	DoctypeNode
	// RawNode nodes are not returned by the parser, but can be part of the
	// Node tree passed to func Render to insert raw HTML (without escaping).
	// If so, this package makes no guarantee that the rendered HTML is secure
	// (from e.g. Cross Site Scripting attacks) or well-formed.
	RawNode
)

[`(html.Node).Type` on pkg.go.dev](https://pkg.go.dev/golang.org/x/net@v0.30.0/html#Node.Type)
